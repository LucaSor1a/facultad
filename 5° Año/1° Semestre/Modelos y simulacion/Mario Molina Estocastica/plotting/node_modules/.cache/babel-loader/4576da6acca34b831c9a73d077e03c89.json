{"ast":null,"code":"'use strict';\n\nmodule.exports = function () {\n  var math = Object.create(Math);\n\n  math.factory = function (a) {\n    if (typeof a !== 'number') {\n      throw new TypeError('built-in math factory only accepts numbers');\n    }\n\n    return Number(a);\n  };\n\n  math.add = function (a, b) {\n    return a + b;\n  };\n\n  math.sub = function (a, b) {\n    return a - b;\n  };\n\n  math.mul = function (a, b) {\n    return a * b;\n  };\n\n  math.div = function (a, b) {\n    return a / b;\n  };\n\n  math.mod = function (a, b) {\n    return a % b;\n  };\n\n  math.factorial = function (a) {\n    var res = 1;\n\n    for (var i = 2; i <= a; i += 1) {\n      res *= i;\n    }\n\n    return res;\n  }; // taken from https://github.com/josdejong/mathjs/blob/master/lib/function/arithmetic/nthRoot.js\n\n\n  math.nthRoot = function (a, root) {\n    var inv = root < 0;\n\n    if (inv) {\n      root = -root;\n    }\n\n    if (root === 0) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a < 0 && Math.abs(root) % 2 !== 1) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a === 0) {\n      return 0;\n    }\n\n    if (!isFinite(a)) {\n      return inv ? 0 : a;\n    }\n\n    var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a < 0 ? -x : x;\n    return inv ? 1 / x : x;\n  }; // logical\n\n\n  math.logicalOR = function (a, b) {\n    return a || b;\n  };\n\n  math.logicalXOR = function (a, b) {\n    /* eslint-disable */\n    return a != b;\n    /* eslint-enable*/\n  };\n\n  math.logicalAND = function (a, b) {\n    return a && b;\n  }; // bitwise\n\n\n  math.bitwiseOR = function (a, b) {\n    /* eslint-disable */\n    return a | b;\n    /* eslint-enable*/\n  };\n\n  math.bitwiseXOR = function (a, b) {\n    /* eslint-disable */\n    return a ^ b;\n    /* eslint-enable*/\n  };\n\n  math.bitwiseAND = function (a, b) {\n    /* eslint-disable */\n    return a & b;\n    /* eslint-enable*/\n  }; // relational\n\n\n  math.lessThan = function (a, b) {\n    return a < b;\n  };\n\n  math.lessEqualThan = function (a, b) {\n    return a <= b;\n  };\n\n  math.greaterThan = function (a, b) {\n    return a > b;\n  };\n\n  math.greaterEqualThan = function (a, b) {\n    return a >= b;\n  };\n\n  math.equal = function (a, b) {\n    /* eslint-disable */\n    return a == b;\n    /* eslint-enable*/\n  };\n\n  math.strictlyEqual = function (a, b) {\n    return a === b;\n  };\n\n  math.notEqual = function (a, b) {\n    /* eslint-disable */\n    return a != b;\n    /* eslint-enable*/\n  };\n\n  math.strictlyNotEqual = function (a, b) {\n    return a !== b;\n  }; // shift\n\n\n  math.shiftRight = function (a, b) {\n    return a >> b;\n  };\n\n  math.shiftLeft = function (a, b) {\n    return a << b;\n  };\n\n  math.unsignedRightShift = function (a, b) {\n    return a >>> b;\n  }; // unary\n\n\n  math.negative = function (a) {\n    return -a;\n  };\n\n  math.positive = function (a) {\n    return a;\n  };\n\n  return math;\n};","map":{"version":3,"sources":["/mnt/sda3/Lucas/Documents/facultad/5° Año/1° Semestre/Modelos y simulaciones/Mario Molina Estocastica/plotting/node_modules/built-in-math-eval/lib/adapter.js"],"names":["module","exports","math","Object","create","Math","factory","a","TypeError","Number","add","b","sub","mul","div","mod","factorial","res","i","nthRoot","root","inv","Error","abs","isFinite","x","pow","logicalOR","logicalXOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","lessThan","lessEqualThan","greaterThan","greaterEqualThan","equal","strictlyEqual","notEqual","strictlyNotEqual","shiftRight","shiftLeft","unsignedRightShift","negative","positive"],"mappings":"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","sourcesContent":["'use strict'\nmodule.exports = function () {\n  var math = Object.create(Math)\n\n  math.factory = function (a) {\n    if (typeof a !== 'number') {\n      throw new TypeError('built-in math factory only accepts numbers')\n    }\n    return Number(a)\n  }\n\n  math.add = function (a, b) {\n    return a + b\n  }\n  math.sub = function (a, b) {\n    return a - b\n  }\n  math.mul = function (a, b) {\n    return a * b\n  }\n  math.div = function (a, b) {\n    return a / b\n  }\n  math.mod = function (a, b) {\n    return a % b\n  }\n  math.factorial = function (a) {\n    var res = 1\n    for (var i = 2; i <= a; i += 1) {\n      res *= i\n    }\n    return res\n  }\n\n  // taken from https://github.com/josdejong/mathjs/blob/master/lib/function/arithmetic/nthRoot.js\n  math.nthRoot = function (a, root) {\n    var inv = root < 0\n    if (inv) {\n      root = -root\n    }\n\n    if (root === 0) {\n      throw new Error('Root must be non-zero')\n    }\n    if (a < 0 && (Math.abs(root) % 2 !== 1)) {\n      throw new Error('Root must be odd when a is negative.')\n    }\n\n    // edge cases zero and infinity\n    if (a === 0) {\n      return 0\n    }\n    if (!isFinite(a)) {\n      return inv ? 0 : a\n    }\n\n    var x = Math.pow(Math.abs(a), 1 / root)\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a < 0 ? -x : x\n    return inv ? 1 / x : x\n  }\n\n  // logical\n  math.logicalOR = function (a, b) {\n    return a || b\n  }\n  math.logicalXOR = function (a, b) {\n    /* eslint-disable */\n    return a != b\n    /* eslint-enable*/\n  }\n  math.logicalAND = function (a, b) {\n    return a && b\n  }\n\n  // bitwise\n  math.bitwiseOR = function (a, b) {\n    /* eslint-disable */\n    return a | b\n    /* eslint-enable*/\n  }\n  math.bitwiseXOR = function (a, b) {\n    /* eslint-disable */\n    return a ^ b\n    /* eslint-enable*/\n  }\n  math.bitwiseAND = function (a, b) {\n    /* eslint-disable */\n    return a & b\n    /* eslint-enable*/\n  }\n\n  // relational\n  math.lessThan = function (a, b) {\n    return a < b\n  }\n  math.lessEqualThan = function (a, b) {\n    return a <= b\n  }\n  math.greaterThan = function (a, b) {\n    return a > b\n  }\n  math.greaterEqualThan = function (a, b) {\n    return a >= b\n  }\n  math.equal = function (a, b) {\n    /* eslint-disable */\n    return a == b\n  /* eslint-enable*/\n  }\n  math.strictlyEqual = function (a, b) {\n    return a === b\n  }\n  math.notEqual = function (a, b) {\n    /* eslint-disable */\n    return a != b\n  /* eslint-enable*/\n  }\n  math.strictlyNotEqual = function (a, b) {\n    return a !== b\n  }\n\n  // shift\n  math.shiftRight = function (a, b) {\n    return (a >> b)\n  }\n  math.shiftLeft = function (a, b) {\n    return (a << b)\n  }\n  math.unsignedRightShift = function (a, b) {\n    return (a >>> b)\n  }\n\n  // unary\n  math.negative = function (a) {\n    return -a\n  }\n  math.positive = function (a) {\n    return a\n  }\n\n  return math\n}\n"]},"metadata":{},"sourceType":"script"}