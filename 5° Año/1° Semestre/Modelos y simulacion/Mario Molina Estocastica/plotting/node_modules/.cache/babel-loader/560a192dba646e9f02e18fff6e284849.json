{"ast":null,"code":"import * as utils from './operations/utils';\nimport round from './round';\n/**\n * Constructor for closed intervals representing all the values inside (and\n * including) `lo` and `hi` e.g. `[lo, hi]`\n *\n * NOTE: If `lo > hi` then the constructor will return an empty interval\n *\n * @class\n * @mixes arithmetic\n * @mixes algebra\n * @mixes misc\n * @mixes relational\n * @mixes trigonometric\n * @mixes utils\n * @mixes constants\n *\n * @link #bounded\n * @link #boundedSingleton\n *\n * @example\n * ```typescript\n * new Interval(1, 2)  // {lo: 1, hi: 2}\n * // function invocation without new is also supported\n * Interval(1, 2)   // {lo: 1, hi: 2}\n * // with numbers\n * Interval(1, 2)   // {lo: 1, hi: 2}\n * Interval(1)      // {lo: 1, hi: 1}\n * // with an array\n * Interval([1, 2]) // {lo: 1, hi: 2}\n * // singleton intervals\n * var x = Interval(1)\n * var y = Interval(2)\n * Interval(x, y)   // {lo: 1, hi: 2}\n * // when `lo > hi` it returns an empty interval\n * Interval(2, 1)   // {lo: Infinity, hi: -Infinity}\n * // bounded interval\n * Interval().bounded(1, 2)  // { lo: 0.9999999999999999, hi: 2.0000000000000004 }\n * // singleton bounded interval\n * Interval().boundedSingleton(2)  // {lo: 1.9999999999999998, hi: 2.0000000000000004}\n * // half open and open intervals\n * // [2, 3]\n * Interval(2, 3)                     // {lo: 2, hi: 3}\n * // (2, 3]\n * Interval().halfOpenLeft(2, 3)      // {lo: 2.0000000000000004, hi: 3}\n * // [2, 3)\n * Interval().halfOpenRight(2, 3)     // {lo: 2, hi: 2.9999999999999996}\n * // (2, 3)\n * Interval().open(2, 3)              // {lo: 2.0000000000000004, hi: 2.9999999999999996}\n * ```\n *\n * @param {number|array|Interval} lo The left endpoint of the interval if it's a\n * number or a singleton interval, if it's an array then an interval will be\n * built out of the elements of the array\n * @param {number|Interval} [hi] The right endpoint of the interval if it's a\n * number or a singleton interval, if omitted then a singleton interval will be\n * built out of `lo`\n */\n\nvar _Interval =\n/** @class */\nfunction () {\n  function _Interval(lo, hi) {\n    if (!(this instanceof Interval)) {\n      return new Interval(lo, hi);\n    }\n\n    if (typeof lo !== 'undefined' && typeof hi !== 'undefined') {\n      // possible cases:\n      // - Interval(1, 2)\n      // - Interval(Interval(1, 1), Interval(2, 2))     // singletons are required\n      if (utils.isInterval(lo)) {\n        if (!utils.isSingleton(lo)) {\n          throw new TypeError('Interval: interval `lo` must be a singleton');\n        }\n\n        lo = lo.lo;\n      }\n\n      if (utils.isInterval(hi)) {\n        if (!utils.isSingleton(hi)) {\n          throw TypeError('Interval: interval `hi` must be a singleton');\n        }\n\n        hi = hi.hi;\n      }\n    } else if (typeof lo !== 'undefined') {\n      // possible cases:\n      // - Interval([1, 2])\n      // - Interval([Interval(1, 1), Interval(2, 2)])\n      if (Array.isArray(lo)) {\n        return new Interval(lo[0], lo[1]);\n      } // - Interval(1)\n\n\n      return new Interval(lo, lo);\n    } else {\n      // possible cases:\n      // - Interval()\n      lo = hi = 0;\n    }\n\n    this.assign(lo, hi);\n  }\n  /**\n   * Sets `this.lo` and `this.hi` to a single value `v`\n   *\n   * @param {number} v\n   * @return {Interval} The calling interval i.e. `this`\n   */\n\n\n  _Interval.prototype.singleton = function (v) {\n    return this.set(v, v);\n  };\n  /**\n   * Sets new endpoints to this interval, the left endpoint is equal to the\n   * previous IEEE floating point value of `lo` and the right endpoint\n   * is equal to the next IEEE floating point\n   * value of `hi`, it's assumed that `lo <= hi`\n   *\n   * @example\n   * ```typescript\n   * const x = Interval().bounded(1, 2)\n   * x.lo < 1 // true, x.lo === 0.9999999999999999\n   * x.hi > 2 // true, x.hi === 2.0000000000000004\n   * ```\n   *\n   * @example\n   * ```typescript\n   * // the correct representation of 1/3\n   * var x = Interval().bounded(1/3, 1/3)\n   * x.lo < 1/3 // true\n   * x.hi > 1/3 // true\n   * // however the floating point representation of 1/3 is less than the real 1/3\n   * // therefore the left endpoint could be 1/3 instead of the previous value of\n   * var next = Interval.round.safeNext\n   * var x = Interval().set(1/3, next(1/3))\n   * // x now represents 1/3 correctly\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval i.e. `this`\n   */\n\n\n  _Interval.prototype.bounded = function (lo, hi) {\n    return this.set(round.prev(lo), round.next(hi));\n  };\n  /**\n   * Equivalent to `Interval().bounded(v, v)`\n   * @param {number} v\n   * @return {Interval} The calling interval i.e. `this`\n   */\n\n\n  _Interval.prototype.boundedSingleton = function (v) {\n    return this.bounded(v, v);\n  };\n  /**\n   * Sets new endpoints for this interval, this method bypasses any\n   * checks on the type of arguments\n   *\n   * @param {Number} lo The left endpoint of the interval\n   * @param {Number} hi The right endpoint of the interval\n   * @return {Interval} The calling interval\n   */\n\n\n  _Interval.prototype.set = function (lo, hi) {\n    this.lo = lo;\n    this.hi = hi;\n    return this;\n  };\n  /**\n   * Sets new endpoints for this interval checking that both arguments exist\n   * and that are valid numbers, additionally if `lo > hi` the interval is set to\n   * an empty interval\n   *\n   * @param {Number} lo The left endpoint of the interval\n   * @param {Number} hi The right endpoint of the interval\n   * @return {Interval} The calling interval\n   */\n\n\n  _Interval.prototype.assign = function (lo, hi) {\n    if (typeof lo !== 'number' || typeof hi !== 'number') {\n      throw TypeError('Interval#assign: arguments must be numbers');\n    }\n\n    if (isNaN(lo) || isNaN(hi) || lo > hi) {\n      return this.setEmpty();\n    }\n\n    return this.set(lo, hi);\n  };\n  /**\n   * Sets the endpoints of this interval to `[∞, -∞]` effectively representing\n   * no values\n   * @return {Interval} The calling interval\n   */\n\n\n  _Interval.prototype.setEmpty = function () {\n    return this.set(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  };\n  /**\n   * Sets the endpoints of this interval to `[-∞, ∞]` effectively representing all\n   * the possible real values\n   * @return {Interval} The calling interval\n   */\n\n\n  _Interval.prototype.setWhole = function () {\n    return this.set(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n  };\n  /**\n   * Sets the endpoints of this interval to the open interval `(lo, hi)`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // (2, 3)\n   * Interval().open(2, 3)  // {lo: 2.0000000000000004, hi: 2.9999999999999996}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n\n\n  _Interval.prototype.open = function (lo, hi) {\n    return this.assign(round.safeNext(lo), round.safePrev(hi));\n  };\n  /**\n   * Sets the endpoints of this interval to the half open interval `(lo, hi]`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // (2, 3]\n   * Interval().halfOpenLeft(2, 3)  // {lo: 2.0000000000000004, hi: 3}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n\n\n  _Interval.prototype.halfOpenLeft = function (lo, hi) {\n    return this.assign(round.safeNext(lo), hi);\n  };\n  /**\n   * Sets the endpoints of this interval to the half open interval `[lo, hi)`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // [2, 3)\n   * Interval.halfOpenRight(2, 3)     // {lo: 2, hi: 2.9999999999999996}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n\n\n  _Interval.prototype.halfOpenRight = function (lo, hi) {\n    return this.assign(lo, round.safePrev(hi));\n  };\n  /**\n   * Array representation of this interval\n   * @return {array}\n   */\n\n\n  _Interval.prototype.toArray = function () {\n    return [this.lo, this.hi];\n  };\n  /**\n   * Creates an interval equal to the calling one\n   * @see Interval.clone\n   * @name Interval.prototype\n   * @example\n   * ```typescript\n   * var x = Interval(2, 3)\n   * x.clone()    // Interval(2, 3)\n   * ```\n   * @return {Interval}\n   */\n\n\n  _Interval.prototype.clone = function () {\n    return new Interval().set(this.lo, this.hi);\n  };\n\n  _Interval.factory = _Interval;\n  return _Interval;\n}();\n\nexport { _Interval };\nvar Interval = _Interval;\nexport { Interval };","map":{"version":3,"mappings":"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","names":["utils","round","lo","hi","Interval","isInterval","isSingleton","TypeError","Array","isArray","assign","_Interval","v","set","prev","next","bounded","isNaN","setEmpty","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","safeNext","safePrev"],"sourceRoot":"","sources":["../src/interval.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}