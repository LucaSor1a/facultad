{"ast":null,"code":"import { Interval } from '../interval';\nimport rmath from '../round';\nimport constants from '../constants';\nimport * as utils from './utils';\nimport * as division from './division';\n/**\n * @mixin arithmetic\n */\n\n/**\n * Adds two intervals\n *\n * @example\n * ```typescript\n * Interval.add(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(1), next(3))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\nexport function add(x, y) {\n  return new Interval(rmath.addLo(x.lo, y.lo), rmath.addHi(x.hi, y.hi));\n}\n/**\n * Subtracts two intervals\n *\n * @example\n * ```typescript\n * Interval.subtract(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(-2), next(0))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\nexport function subtract(x, y) {\n  return new Interval(rmath.subLo(x.lo, y.hi), rmath.subHi(x.hi, y.lo));\n}\n/**\n * Alias for {@link subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Multiplies two intervals, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(2, 3)\n * ) // Interval(prev(2), next(6))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, Infinity),\n *  Interval(4, 6)\n * ) // Interval(prev(4), Infinity)\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-3, -2)\n * ) // Interval(prev(-6), next(-2))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-2, 3)\n * ) // Interval(prev(-4), next(6))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(-2, -1),\n *  Interval(-3, -2)\n * ) // Interval(prev(2), next(6))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\nexport function multiply(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n\n  var xl = x.lo;\n  var xh = x.hi;\n  var yl = y.lo;\n  var yh = y.hi;\n  var out = new Interval();\n\n  if (xl < 0) {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // mixed * mixed\n          out.lo = Math.min(rmath.mulLo(xl, yh), rmath.mulLo(xh, yl));\n          out.hi = Math.max(rmath.mulHi(xl, yl), rmath.mulHi(xh, yh));\n        } else {\n          // mixed * negative\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xl, yl);\n        }\n      } else {\n        if (yh > 0) {\n          // mixed * positive\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // mixed * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    } else {\n      if (yl < 0) {\n        if (yh > 0) {\n          // negative * mixed\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xl, yl);\n        } else {\n          // negative * negative\n          out.lo = rmath.mulLo(xh, yh);\n          out.hi = rmath.mulHi(xl, yl);\n        }\n      } else {\n        if (yh > 0) {\n          // negative * positive\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xh, yl);\n        } else {\n          // negative * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    }\n  } else {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // positive * mixed\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // positive * negative\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xl, yh);\n        }\n      } else {\n        if (yh > 0) {\n          // positive * positive\n          out.lo = rmath.mulLo(xl, yl);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // positive * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    } else {\n      // zero * any other value\n      out.lo = 0;\n      out.hi = 0;\n    }\n  }\n\n  return out;\n}\n/**\n * Alias for {@link multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Computes x/y, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n *\n * NOTE: an extreme case of division might results in multiple\n * intervals, unfortunately this library doesn't support multi-interval\n * arithmetic yet so a single interval will be returned instead with\n * the {@link hull} of the resulting intervals (this is the way\n * Boost implements it too)\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(3, 4)\n * ) // Interval(prev(1/4), next(2/3))\n * ```\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(-2, 1),\n *   Interval(-4, -3)\n * ) // Interval(prev(-1/3), next(2/3))\n * ```\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(-1, 1)\n * ) // Interval(-Infinity, Infinity)\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\n\nexport function divide(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n\n  if (utils.zeroIn(y)) {\n    if (y.lo !== 0) {\n      if (y.hi !== 0) {\n        return division.zero(x);\n      } else {\n        return division.negative(x, y.lo);\n      }\n    } else {\n      if (y.hi !== 0) {\n        return division.positive(x, y.hi);\n      } else {\n        return constants.EMPTY;\n      }\n    }\n  } else {\n    return division.nonZero(x, y);\n  }\n}\n/**\n * Alias for {@link divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Computes +x (identity function)\n * @link clone\n *\n * @example\n * ```typescript\n * Interval.positive(\n *  Interval(1, 2)\n * )  // Interval(1, 2)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\n\nexport function positive(x) {\n  return new Interval(x.lo, x.hi);\n}\n/**\n * Computes -x\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval(1, 2)\n * )  // Interval(-2, -1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval(-Infinity, Infinity)\n * )  // Interval(-Infinity, Infinity)\n * ```\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval.WHOLE\n * )  // Interval.WHOLE\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\n\nexport function negative(x) {\n  return new Interval(-x.hi, -x.lo);\n}","map":{"version":3,"mappings":"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","names":["Interval","rmath","constants","utils","division","add","x","y","addLo","lo","addHi","hi","subtract","subLo","subHi","sub","multiply","isEmpty","EMPTY","xl","xh","yl","yh","out","Math","min","mulLo","max","mulHi","mul","divide","zeroIn","zero","negative","positive","nonZero","div"],"sourceRoot":"","sources":["../../src/operations/arithmetic.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}